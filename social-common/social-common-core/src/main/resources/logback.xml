<?xml version="1.0" encoding="UTF-8"?>
<!-- 60秒扫描一次该配置文件是否有更改 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

  <!--声明一个变量, 代表日志文件的根目录 -->
  <property name="LOG_HOME" value="${user.home}/logs/social-app/${log.dir:-other}"/>
  <!-- 日志归档目录 -->
  <property name="LOG_ARCHIVE_DIR" value="${LOG_HOME}/archive"/>
  <!-- 日志文件最多保留多少天 -->
  <property name="MAX_HISTORY" value="10"/>
  <!-- 单个文件最大大小 -->
  <property name="MAX_FILE_SIZE" value="100MB"/>

  <!-- 彩色日志依赖的渲染类 -->
  <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
  <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
  <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
  <!-- Spring Boot彩色日志格式 -->
  <property name="LOG_CONSOLE_PATTERN" value="${LOG_CONSOLE_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
  <property name="LOG_FILE_PATTERN" value="%date{yyyy-MM-dd HH:mm:ss.SSS} [%5p] [%t] %X{requestId} %c{40}.%method : %m%n"/>

  <!--输出到控制台 -->
  <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <!--打印格式
      %d 日期 24小时制:分:秒.毫秒数
      %p 日志级别优先级
      %c 打印日志的全类名
      %t 线程名
      %m message, 打印的信息
      %n 换行
      -->
      <pattern>${LOG_CONSOLE_PATTERN}</pattern>
    </encoder>

    <!--处理日志级别,ThresholdFilter处理大于等于level标签声明的级别-->
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>DEBUG</level>
    </filter>
  </appender>

  <!-- 输出到文件, 日志级别大于等于debug级别 -->
  <appender name="debug" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_HOME}/debug.log</file>
    <!-- 将日志按时间打包压缩, 单个文件超出指定大小后, 写到新的文件, 索引从0开始 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <fileNamePattern>${LOG_ARCHIVE_DIR}/%d{yyyyMMdd}/debug-%d{yyyyMMdd}.%i.log.gz</fileNamePattern>
      <maxHistory>${MAX_HISTORY}</maxHistory>
      <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
    </rollingPolicy>
    <encoder>
      <pattern>${LOG_FILE_PATTERN}</pattern>
    </encoder>
    <!--处理日志级别,ThresholdFilter处理大于等于level标签声明的级别-->
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>DEBUG</level>
    </filter>
  </appender>

  <!-- 输出到文件, 日志级别对应info级别(只能info级别日志被输出) -->
  <appender name="info" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_HOME}/info.log</file>
    <!-- 将日志按时间打包压缩, 单个文件超出指定大小后, 写到新的文件, 索引从0开始 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <fileNamePattern>${LOG_ARCHIVE_DIR}/%d{yyyyMMdd}/info-%d{yyyyMMdd}.%i.log.gz</fileNamePattern>
      <maxHistory>${MAX_HISTORY}</maxHistory>
      <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
    </rollingPolicy>
    <encoder>
      <pattern>${LOG_FILE_PATTERN}</pattern>
    </encoder>
    <!--处理INFO, 不匹配直接拒接, LevelFilter只处理与level标签相同的级别 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>INFO</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!-- 输出到文件, 日志级别对应ERROR级别(只能ERROR级别日志被输出) -->
  <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_HOME}/error.log</file>
    <!-- 将日志按时间打包压缩, 单个文件超出指定大小后, 写到新的文件, 索引从0开始 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <fileNamePattern>${LOG_ARCHIVE_DIR}/%d{yyyyMMdd}/error-%d{yyyyMMdd}.%i.log.gz</fileNamePattern>
      <maxHistory>${MAX_HISTORY}</maxHistory>
      <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
    </rollingPolicy>
    <encoder>
      <pattern>${LOG_FILE_PATTERN}</pattern>
    </encoder>
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>ERROR</level>
      <onMatch>ACCEPT</onMatch>
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!-- 整个项目 log 日志 -->
  <logger name="com.wangtao.social" level="DEBUG" additivity="false">
    <appender-ref ref="console"/>
    <appender-ref ref="debug"/>
    <appender-ref ref="info"/>
    <appender-ref ref="error"/>
  </logger>

  <!-- 根日志 -->
  <root level="INFO">
    <appender-ref ref="console"/>
    <appender-ref ref="debug"/>
    <appender-ref ref="info"/>
    <appender-ref ref="error"/>
  </root>
</configuration>